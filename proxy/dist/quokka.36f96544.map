{"version":3,"sources":["node_modules/can-namespace/can-namespace.js","node_modules/can-ndjson-stream/can-ndjson-stream.js","quokka.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACnEA;;;;;;AAEA,MAAM,uBAAN,EAA+B;AAA/B,CACG,IADH,CACQ;AAAA,WAAY,+BAAa,SAAS,IAAtB,CAAZ;AAAA,CADR,EAGG,IAHH,CAGQ,UAAC,aAAD,EAAkB;AACtB;AACA,QAAM,SAAS,cAAc,SAAd,EAAf;AACA,QAAI,cAAJ;AAEA,WAAO,IAAP,GAAc,IAAd,CAAoB,QAAO,cAAC,MAAD,EAAW;AACpC,YAAI,OAAO,IAAX,EAAiB;AACf;AACD;AACD,gBAAQ,GAAR,CAAY,OAAO,KAAnB,EAJoC,CAIV;AAC1B,sBACG,SADH,GAEG,IAFH,GAGG,IAHH,CAGQ,KAHR;AAID,KATD;AAUD,CAlBH","file":"quokka.36f96544.map","sourceRoot":"..","sourcesContent":["module.exports = {};\n","\"use strict\";\n/*exported ndjsonStream*/\n\nvar namespace = require('can-namespace');\n\nvar ndjsonStream = function(response) {\n  // For cancellation\n  var is_reader, cancellationRequest = false;\n  return new ReadableStream({\n    start: function(controller) {\n      var reader = response.getReader();\n      is_reader = reader;\n      var decoder = new TextDecoder();\n      var data_buf = \"\";\n\n      reader.read().then(function processResult(result) {\n        if (result.done) {\n          if (cancellationRequest) {\n            // Immediately exit\n            return;\n          }\n\n          data_buf = data_buf.trim();\n          if (data_buf.length !== 0) {\n            try {\n              var data_l = JSON.parse(data_buf);\n              controller.enqueue(data_l);\n            } catch(e) {\n              controller.error(e);\n              return;\n            }\n          }\n          controller.close();\n          return;\n        }\n\n        var data = decoder.decode(result.value, {stream: true});\n        data_buf += data;\n        var lines = data_buf.split(\"\\n\");\n        for(var i = 0; i < lines.length - 1; ++i) {\n          var l = lines[i].trim();\n          if (l.length > 0) {\n            try {\n              var data_line = JSON.parse(l);\n              controller.enqueue(data_line);\n            } catch(e) {\n              controller.error(e);\n              cancellationRequest = true;\n              reader.cancel();\n              return;\n            }\n          }\n        }\n        data_buf = lines[lines.length-1];\n\n        return reader.read().then(processResult);\n      });\n\n    },\n    cancel: function(reason) {\n      console.log(\"Cancel registered due to \", reason);\n      cancellationRequest = true;\n      is_reader.cancel();\n    }\n  });\n};\n\nmodule.exports = namespace.ndjsonStream = ndjsonStream;","import ndjsonStream from 'can-ndjson-stream'\n\nfetch('http://localhost:3000') // make a fetch request to a NDJSON stream service\n  .then(response => ndjsonStream(response.body), // ndjsonStream parses the response.body\n  )\n  .then((exampleStream) => {\n    // retain access to the reader so that you can cancel it\n    const reader = exampleStream.getReader()\n    let read\n\n    reader.read().then((read = (result) => {\n      if (result.done) {\n        return\n      }\n      console.log(result.value) // logs {item:\"first\"}\n      exampleStream\n        .getReader()\n        .read()\n        .then(read)\n    }))\n  })\n"]}